{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/grid.js","webpack:///./src/grid/base.js","webpack:///./src/grid/canvas.js","webpack:///./src/index.js","webpack:///./src/node.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,WAAW,mBAAO,CAAC,0CAAgB;AACnC,aAAa,mBAAO,CAAC,8CAAkB;;AAEvC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA,WAAW,mBAAO,CAAC,iCAAY;AAC/B;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sD;AACA;AACA;AACA,wBAAwB;AACxB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;ACjDA,WAAW,mBAAO,CAAC,qCAAW;;AAE9B;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,MAAM;AACN;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1EA,cAAc,mBAAO,CAAC,gCAAW;AACjC,WAAW,mBAAO,CAAC,gCAAW;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,yBAAyB;AACtC,a;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,a;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,kB;AACA;AACA;AACA","file":"hex.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","var base = require('./grid/base.js');\nvar canvas = require('./grid/canvas.js');\n\nmodule.exports = {\n    base: base,\n    canvas: canvas,\n    BaseHexGrid: base.BaseHexGrid,\n    CanvasHexGrid: canvas.CanvasHexGrid,\n}\n","var node = require('../node.js')\nconst SQRT_3 = Math.sqrt(3.0);\n\nclass BaseHexGrid {\n   constructor(options={}) {\n        this.hexagons = {}\n        for(var key of Object.keys(this.default_options)) {\n            if(this[key] === undefined) {\n                if(options[key] !== undefined) {\n                    this[key] = options[key];\n                } else {\n                    this[key] = this.default_options[key];\n                }\n            }\n        }\n\n        this.generateHexagons();\n    }\n\n    setRadius(r) {\n        this.radius = r;\n        this.generateHexagons();\n    }\n\n    generateHexagons() {\n        this.hexagons = {};\n        this.center.area(this.radius).forEach(hex => { \n            return this.hexagons[hex.toString()] = {\n                node: hex,\n                data: {},\n            }\n        });\n    }\n\n    calculateHexRadius(width=100, height=100, radius=this.radius) {\n        var n = 2 * radius + 1;\n        var w = width / (0.5 + 1.5 * n);\n        var h = height / (SQRT_3 * n);\n        return Math.min(w, h);\n    }\n}\n\nBaseHexGrid.prototype.default_options = {\n    center: new node.HexNode(0, 0),\n    radius: 5,\n}\n\nmodule.exports = {\n    BaseHexGrid: BaseHexGrid\n}\n","var base = require('./base.js')\n\nfunction pathHexagon(ctx, x, y, radius) {\n    ctx.beginPath();\n    ctx.moveTo(x + radius, y);\n    for(var i=1; i<6; i+= 1) {\n        ctx.lineTo(x + radius * Math.cos(Math.PI * i / 3.0), \n                   y + radius * Math.sin(Math.PI * i / 3.0));\n    }\n    ctx.closePath();\n}\n\nfunction fillHexagon(ctx, x, y, radius) {\n    pathHexagon(ctx, x, y, radius);\n    ctx.fill();\n}\n\nfunction strokeHexagon(ctx, x, y, radius) {\n    pathHexagon(ctx, x, y, radius);\n    ctx.stroke();\n}\n\nclass CanvasHexGrid extends base.BaseHexGrid {\n   constructor(canvas, options={}) {\n        super(options);\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n    }\n\n    get hexgonRadius() {\n        console.log(this.canvas.width, this.canvas.height, this.canvasPadding);\n        return calculateHexRadius(\n            this.canvas.width - this.canvasPadding.x,\n            this.canvas.height - this.canvasPadding.y\n        );\n    }\n\n    renderHexagon(node, canvasPosition, data) {\n        var hR = this.hexagonRadius;\n        this.ctx.save();\n        this.ctx.strokeStyle = 'black';\n        strokeHexagon(this.ctx, canvasPosition.x, canvasPosition.y, hR);\n        this.ctx.restore();\n    }\n\n    render() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        var hR = this.hexagonRadius;\n        var cx = this.canvas.width / 2.0;\n        var cy = this.canvas.height / 2.0;\n        console.log(\"hR\", hR);\n        for(var hexagon of Object.values(hexagon, this.hexagons)) {\n            var cartesian = hexagon.node.to_cartesian(hR);\n            cartesian.x += cx;\n            cartesian.y += cy;\n            this.renderHexagon(hexagon.node, cartesian, hexagon.data);\n        }\n    }\n\n}\n\nCanvasHexGrid.prototype.default_options = Object.assign(\n    {},\n    base.BaseHexGrid.prototype.default_options,\n    {\n        'canvasPadding': {x: 5, y: 5},\n    }\n)\n\nmodule.exports = {\n    CanvasHexGrid: CanvasHexGrid,\n    pathHexagon: pathHexagon,\n    fillHexagon: fillHexagon,\n    strokeHexagon: strokeHexagon\n}\n","var hexnode = require('./node.js');\nvar grid = require('./grid.js');\n\nwindow.hex = module.exports = {\n    grid: grid,\n    BaseHexGrid: grid.BaseHexGrid,\n    CanvasHexGrid: grid.CanvasHexGrid,\n    HexNode: hexnode.HexNode,\n    HexNodeType: hexnode.HexNodeType,\n}\n","const HexNodeType = {\n    'FLAT_TOP': 0,\n    'POINTED_TOP': 1\n};\n\nconst SQRT_3 = Math.sqrt(3.0);\nconst SQRT_3_2 = SQRT_3 / 2.0;\nconst SQRT_3_3 = SQRT_3 / 3.0;\n\nclass HexNode {\n    constructor(q, r) {\n        this.q = q;\n        this.r = r;\n        this.type = HexNodeType.FLAT_TOP;\n    }\n\n    [Symbol.toPrimitive](hint) {\n        return this.toString();\n    }\n\n    static from_cube(cube) {\n        var q = cube.x;\n        var r = cube.z;\n        return this.constructor(q, r);\n    }\n\n    static from_cartesian(cartesian, size, type, round) {\n        var q, r;\n        type = type === undefined ? HexNodeType.FLAT_TOP : type;\n        round = round === undefined ? true : round;\n        if(type == HexNodeType.FLAT_TOP) {\n            q = 2 * cartesian.x / (3.0 * size);\n            r = (- cartesian.x / 3.0 + SQRT_3_3 * cartesian.y) / (1.0 * size);\n        } else {\n            q = (SQRT_3_3 * cartesian.x - cartesian.y / 3.0) / (1.0 * size);\n            r = 2 * cartesian.y / (3.0 * size);\n        }\n\n        return (new this(q, r)).round();\n    }\n\n    toString() {\n        return 'HexNode(' + this.q + ',' + this.r + ')';\n    }\n\n    get s() { return -this.q - this.r; }\n    x(size) { \n        if(this.type == HexNodeType.FLAT_TOP) {\n            return size * 1.5 * this.q;\n        } else {\n            x = size * (SQRT_3 * this.q + SQRT_3_2 * this.r);\n        }\n        return x;\n    }\n\n    y(size) { \n        if(this.type == HexNodeType.FLAT_TOP) {\n            return size * (SQRT_3_2 * this.q + SQRT_3 * this.r);\n        } else {\n            return size * 1.5 * this.r;\n        }\n    }\n\n    round() {\n        var Rq = Math.round(this.q);\n        var Rr = Math.round(this.r);\n        var Rs = Math.round(this.s);\n\n        var dq = Math.abs(dq - this.q)\n        var dr = Math.abs(dr - this.r)\n        var ds = Math.abs(ds - this.s)\n\n        if(dq > ds && dq > dr) {\n            Rq = - Rr - Rs;\n        } else if(ds > dr) {\n            Rs = - Rq - Rr;\n        } else {\n            Rr = - Rq - Rs;\n        }\n\n        return new this.constructor(Rq, Rr);\n    }\n\n    to_cube() {\n        return {x: this.q, y: this.s, z: this.r}\n    }\n\n    to_cartesian(size) {\n        var x, y;\n        if(this.type == HexNodeType.FLAT_TOP) {\n            x = size * 1.5 * this.q;\n            y = size * (SQRT_3_2 * this.q + SQRT_3 * this.r);\n        } else {\n            x = size * (SQRT_3 * this.q + SQRT_3_2 * this.r);\n            y = size * 1.5 * this.r;\n        }\n        return {x: x, y: y};\n    }\n\n    area(range) {\n        var output = [];\n        for(var q = -range; q <= range; q++) {\n            var lower = Math.max(-range, -q - range);\n            var upper = Math.min(range, -q + range);\n            for(var s = lower; s <= upper; s++) {\n                var r = - q -s\n                output.push(new this.constructor(this.q + q, this.r + r));\n            }\n        }\n\n        return output;\n    }\n\n    __eq__(obj) {\n        return obj.q == this.q && obj.r == this.r;\n    }\n\n    neighbours() {\n        return this.area(1).filter(x => !this.__eq__(x));\n    }\n\n    add(obj) {\n        return new this.constructor(this.q + obj.q, this.r + obj.r);\n    }\n\n    subtract(obj) {\n        return new this.constructor(this.q - obj.q, this.r - obj.r);\n    }\n\n    dot(m) {\n        return new this.constructor(this.q * m, this.r * m);\n    }\n\n    lerp(obj, i) {\n        var diff = obj.subtract(this);\n        return this.add(diff.dot(i));\n    }\n\n}\n\nmodule.exports = { \n    HexNode: HexNode,\n    HexNodeType: HexNodeType\n}\n"],"sourceRoot":""}